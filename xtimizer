#!/usr/bin/env python3

import os
import sys
import subprocess
import argparse
from pathlib import Path

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
VIDEO_EXTENSIONS = {'.mp4', '.mkv', '.avi', '.mov', '.wmv', '.flv', '.webm', '.m4v', '.mpg', '.mpeg', '.3gp'}
IMAGE_EXTENSIONS = {'.jpg', '.jpeg', '.png', '.gif', '.bmp', '.tiff', '.tif', '.webp'}

def check_ffmpeg():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ ffmpeg"""
    try:
        subprocess.run(['ffmpeg', '-version'], capture_output=True, check=True)
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ùå –û—à–∏–±–∫–∞: ffmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ffmpeg –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞.")
        return False

# ==================== HLS –§–£–ù–ö–¶–ò–ò ====================

def run_hls_ffmpeg_command(input_file, output_dir):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É ffmpeg –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –≤ HLS"""
    os.makedirs(output_dir, exist_ok=True)
    
    cmd = [
        'ffmpeg', '-nostdin', '-i', str(input_file),
        '-preset', 'veryfast',
        '-keyint_min', '50', '-g', '50', '-sc_threshold', '0',
        '-map', '0:v:0', '-map', '0:a:0?',
        '-c:v', 'libx264', '-c:a', 'aac',
        '-b:v:0', '2000k', '-b:a:0', '128k',
        '-var_stream_map', 'v:0,a:0',
        '-master_pl_name', 'master.m3u8',
        '-f', 'hls',
        '-hls_time', '6',
        '-hls_list_size', '0',
        '-hls_segment_filename', f'{output_dir}/segment_%03d.ts',
        f'{output_dir}/playlist.m3u8'
    ]
    
    return subprocess.run(cmd, capture_output=True, text=True)

def convert_video_to_hls(input_file, delete_original=False):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –æ–¥–Ω–æ –≤–∏–¥–µ–æ –≤ HLS —Ñ–æ—Ä–º–∞—Ç"""
    input_path = Path(input_file)
    output_dir_name = input_path.stem
    output_dir = input_path.parent / output_dir_name
    
    print(f"–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º: {input_file}")
    print(f"–í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {output_dir}")
    
    try:
        result = run_hls_ffmpeg_command(input_path, output_dir)
        
        if result.returncode == 0:
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {input_file}")
            
            if delete_original:
                os.remove(input_file)
                print(f"üóëÔ∏è  –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {input_file}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ {input_file}:")
            print(f"Stderr: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {input_file}: {str(e)}")
        return False
        
    return True

def find_video_files(directory):
    """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ"""
    video_files = []
    for root, dirs, files in os.walk(directory):
        for file in files:
            if Path(file).suffix.lower() in VIDEO_EXTENSIONS:
                video_files.append(os.path.join(root, file))
    return video_files

# ==================== IMAGES –§–£–ù–ö–¶–ò–ò ====================

def run_image_ffmpeg_command(input_file, output_file):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É ffmpeg –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    cmd = [
        'ffmpeg', '-nostdin', '-y',
        '-i', str(input_file),
        '-vf', 'scale=iw:ih',
        '-c:v', 'libwebp',
        '-quality', '85',
        '-compression_level', '6',
        '-preset', 'default',
        '-loop', '0',
        str(output_file)
    ]
    
    return subprocess.run(cmd, capture_output=True, text=True)

def optimize_image(input_file, delete_original=False):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
    input_path = Path(input_file)
    output_path = input_path.with_suffix('.webp')
    
    if input_path.suffix.lower() == '.webp':
        temp_path = input_path.with_suffix('.webp.tmp')
        actual_output = temp_path
    else:
        actual_output = output_path
    
    print(f"–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º: {input_file}")
    
    try:
        original_size = os.path.getsize(input_file)
        result = run_image_ffmpeg_command(input_path, actual_output)
        
        if result.returncode == 0:
            new_size = os.path.getsize(actual_output)
            
            if input_path.suffix.lower() == '.webp':
                os.replace(actual_output, input_path)
                final_path = input_path
            else:
                final_path = actual_output
                
            size_saved = original_size - new_size
            percent_saved = (size_saved / original_size) * 100 if original_size > 0 else 0
            
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {final_path}")
            print(f"üìä –†–∞–∑–º–µ—Ä: {original_size} –±–∞–π—Ç ‚Üí {new_size} –±–∞–π—Ç "
                  f"(—ç–∫–æ–Ω–æ–º–∏—è: {size_saved} –±–∞–π—Ç, {percent_saved:.1f}%)")
            
            if delete_original and input_path.suffix.lower() != '.webp':
                os.remove(input_file)
                print(f"üóëÔ∏è  –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {input_file}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ {input_file}:")
            print(f"Stderr: {result.stderr}")
            
            if actual_output.exists():
                os.remove(actual_output)
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {input_file}: {str(e)}")
        try:
            if actual_output.exists():
                os.remove(actual_output)
        except:
            pass
        return False
        
    return True

def find_image_files(directory):
    """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ"""
    image_files = []
    for root, dirs, files in os.walk(directory):
        for file in files:
            if Path(file).suffix.lower() in IMAGE_EXTENSIONS:
                image_files.append(os.path.join(root, file))
    return image_files

def format_size(size_bytes):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if size_bytes == 0:
        return "0 B"
    
    size_names = ["B", "KB", "MB", "GB"]
    i = 0
    size = float(size_bytes)
    
    while size >= 1024.0 and i < len(size_names) - 1:
        size /= 1024.0
        i += 1
    
    return f"{size:.1f} {size_names[i]}"

# ==================== –ì–õ–ê–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

def process_hls(args):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É hls"""
    if not check_ffmpeg():
        sys.exit(1)
    
    path = Path(args.path)
    
    if not path.exists():
        print(f"‚ùå –û—à–∏–±–∫–∞: –ü—É—Ç—å {args.path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        sys.exit(1)
    
    video_files = []
    
    if path.is_file():
        if path.suffix.lower() in VIDEO_EXTENSIONS:
            video_files = [str(path)]
        else:
            print(f"‚ùå –§–∞–π–ª {path} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç–æ–º")
            print(f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(sorted(VIDEO_EXTENSIONS))}")
            sys.exit(1)
    else:
        video_files = find_video_files(str(path))
        
        if not video_files:
            print(f"üìÅ –í–∏–¥–µ–æ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {args.path}")
            print(f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(sorted(VIDEO_EXTENSIONS))}")
            sys.exit(0)
    
    print(f"üé¨ –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤: {len(video_files)}")
    
    success_count = 0
    for video_file in video_files:
        if convert_video_to_hls(video_file, args.delete):
            success_count += 1
        print("-" * 50)
    
    print(f"\n‚ú® –ì–æ—Ç–æ–≤–æ! –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {success_count}/{len(video_files)} —Ñ–∞–π–ª–æ–≤")

def process_pictures(args):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É pictures"""
    if not check_ffmpeg():
        sys.exit(1)
    
    path = Path(args.path)
    
    if not path.exists():
        print(f"‚ùå –û—à–∏–±–∫–∞: –ü—É—Ç—å {args.path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        sys.exit(1)
    
    image_files = []
    
    if path.is_file():
        if path.suffix.lower() in IMAGE_EXTENSIONS:
            image_files = [str(path)]
        else:
            print(f"‚ùå –§–∞–π–ª {path} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            print(f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(sorted(IMAGE_EXTENSIONS))}")
            sys.exit(1)
    else:
        image_files = find_image_files(str(path))
        
        if not image_files:
            print(f"üñºÔ∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {args.path}")
            print(f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(sorted(IMAGE_EXTENSIONS))}")
            sys.exit(0)
    
    print(f"üñºÔ∏è  –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(image_files)}")
    
    total_original_size = sum(os.path.getsize(f) for f in image_files if os.path.exists(f))
    
    success_count = 0
    total_optimized_size = 0
    
    for image_file in image_files:
        if optimize_image(image_file, args.delete):
            success_count += 1
            output_path = Path(image_file).with_suffix('.webp')
            if output_path.exists():
                total_optimized_size += os.path.getsize(output_path)
            elif os.path.exists(image_file):
                total_optimized_size += os.path.getsize(image_file)
        print("-" * 50)
    
    total_saved = total_original_size - total_optimized_size
    percent_saved = (total_saved / total_original_size * 100) if total_original_size > 0 else 0
    
    print(f"\n‚ú® –ì–æ—Ç–æ–≤–æ! –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {success_count}/{len(image_files)} —Ñ–∞–π–ª–æ–≤")
    print(f"üìä –û–±—â–∞—è —ç–∫–æ–Ω–æ–º–∏—è –º–µ—Å—Ç–∞: {format_size(total_saved)} ({percent_saved:.1f}%)")
    print(f"üìä –ë—ã–ª–æ: {format_size(total_original_size)} ‚Üí –°—Ç–∞–ª–æ: {format_size(total_optimized_size)}")

def main():
    parser = argparse.ArgumentParser(
        description='üöÄ XTimizer - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  xtimizer hls                       # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –≤–∏–¥–µ–æ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ HLS
  xtimizer hls /path/to/videos       # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏  
  xtimizer hls video.mp4 --delete    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω —Ñ–∞–π–ª —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –∏—Å—Ö–æ–¥–Ω–∏–∫–∞
  
  xtimizer pictures                  # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  xtimizer pictures /path/to/images  # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  xtimizer pictures image.jpg -d     # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω —Ñ–∞–π–ª —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –∏—Å—Ö–æ–¥–Ω–∏–∫–∞

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
  –í–∏–¥–µ–æ: mp4, mkv, avi, mov, wmv, flv, webm, m4v, mpg, mpeg, 3gp
  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: jpg, jpeg, png, gif, bmp, tiff, tif, webp
        """
    )
    
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    
    # –ü–∞—Ä—Å–µ—Ä –¥–ª—è HLS
    hls_parser = subparsers.add_parser('hls', help='–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –≤ HLS —Ñ–æ—Ä–º–∞—Ç')
    hls_parser.add_argument('path', nargs='?', default='.', 
                           help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è)')
    hls_parser.add_argument('-d', '--delete', action='store_true',
                           help='–£–¥–∞–ª–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏')
    
    # –ü–∞—Ä—Å–µ—Ä –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    pictures_parser = subparsers.add_parser('pictures', help='–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ WebP')
    pictures_parser.add_argument('path', nargs='?', default='.', 
                                help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è)')
    pictures_parser.add_argument('-d', '--delete', action='store_true',
                                help='–£–¥–∞–ª–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        sys.exit(0)
    
    if args.command == 'hls':
        process_hls(args)
    elif args.command == 'pictures':
        process_pictures(args)

if __name__ == '__main__':
    main()
